// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
internal protocol APIProtocol: Sendable {
    /// Get the latest release
    ///
    /// View the latest published full release for the repository.
    ///
    /// The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/latest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)`.
    func repos_sol_get_hyphen_latest_hyphen_release(_ input: Operations.repos_sol_get_hyphen_latest_hyphen_release.Input) async throws -> Operations.repos_sol_get_hyphen_latest_hyphen_release.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get the latest release
    ///
    /// View the latest published full release for the repository.
    ///
    /// The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/latest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)`.
    internal func repos_sol_get_hyphen_latest_hyphen_release(
        path: Operations.repos_sol_get_hyphen_latest_hyphen_release.Input.Path,
        headers: Operations.repos_sol_get_hyphen_latest_hyphen_release.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_latest_hyphen_release.Output {
        try await repos_sol_get_hyphen_latest_hyphen_release(Operations.repos_sol_get_hyphen_latest_hyphen_release.Input(
            path: path,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
internal enum Servers {
    internal static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
internal enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    internal enum Schemas {
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        internal struct simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            internal var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            internal var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            internal var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            internal var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            internal var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            internal var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            internal var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            internal var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            internal var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            internal var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            internal var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            internal var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            internal var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            internal var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            internal var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            internal var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            internal var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            internal var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            internal var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            internal var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            internal var starred_at: Swift.String?
            /// Creates a new `simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            internal init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            internal enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        internal struct nullable_hyphen_simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            internal var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            internal var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            internal var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            internal var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            internal var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            internal var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            internal var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            internal var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            internal var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            internal var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            internal var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            internal var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            internal var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            internal var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            internal var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            internal var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            internal var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            internal var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            internal var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            internal var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            internal var starred_at: Swift.String?
            /// Creates a new `nullable_hyphen_simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            internal init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            internal enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// - Remark: Generated from `#/components/schemas/reaction-rollup`.
        internal struct reaction_hyphen_rollup: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/url`.
            internal var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/total_count`.
            internal var total_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/+1`.
            internal var _plus_1: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/-1`.
            internal var _hyphen_1: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/laugh`.
            internal var laugh: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/confused`.
            internal var confused: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/heart`.
            internal var heart: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/hooray`.
            internal var hooray: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/eyes`.
            internal var eyes: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/rocket`.
            internal var rocket: Swift.Int
            /// Creates a new `reaction_hyphen_rollup`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - total_count:
            ///   - _plus_1:
            ///   - _hyphen_1:
            ///   - laugh:
            ///   - confused:
            ///   - heart:
            ///   - hooray:
            ///   - eyes:
            ///   - rocket:
            internal init(
                url: Swift.String,
                total_count: Swift.Int,
                _plus_1: Swift.Int,
                _hyphen_1: Swift.Int,
                laugh: Swift.Int,
                confused: Swift.Int,
                heart: Swift.Int,
                hooray: Swift.Int,
                eyes: Swift.Int,
                rocket: Swift.Int
            ) {
                self.url = url
                self.total_count = total_count
                self._plus_1 = _plus_1
                self._hyphen_1 = _hyphen_1
                self.laugh = laugh
                self.confused = confused
                self.heart = heart
                self.hooray = hooray
                self.eyes = eyes
                self.rocket = rocket
            }
            internal enum CodingKeys: String, CodingKey {
                case url
                case total_count
                case _plus_1 = "+1"
                case _hyphen_1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case eyes
                case rocket
            }
        }
        /// Data related to a release.
        ///
        /// - Remark: Generated from `#/components/schemas/release-asset`.
        internal struct release_hyphen_asset: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/release-asset/url`.
            internal var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/browser_download_url`.
            internal var browser_download_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/id`.
            internal var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release-asset/node_id`.
            internal var node_id: Swift.String
            /// The file name of the asset.
            ///
            /// - Remark: Generated from `#/components/schemas/release-asset/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/label`.
            internal var label: Swift.String?
            /// State of the release asset.
            ///
            /// - Remark: Generated from `#/components/schemas/release-asset/state`.
            @frozen internal enum statePayload: String, Codable, Hashable, Sendable {
                case uploaded = "uploaded"
                case open = "open"
            }
            /// State of the release asset.
            ///
            /// - Remark: Generated from `#/components/schemas/release-asset/state`.
            internal var state: Components.Schemas.release_hyphen_asset.statePayload
            /// - Remark: Generated from `#/components/schemas/release-asset/content_type`.
            internal var content_type: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/size`.
            internal var size: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release-asset/download_count`.
            internal var download_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release-asset/created_at`.
            internal var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/release-asset/updated_at`.
            internal var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/release-asset/uploader`.
            internal var uploader: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// Creates a new `release_hyphen_asset`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - browser_download_url:
            ///   - id:
            ///   - node_id:
            ///   - name: The file name of the asset.
            ///   - label:
            ///   - state: State of the release asset.
            ///   - content_type:
            ///   - size:
            ///   - download_count:
            ///   - created_at:
            ///   - updated_at:
            ///   - uploader:
            internal init(
                url: Swift.String,
                browser_download_url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                label: Swift.String? = nil,
                state: Components.Schemas.release_hyphen_asset.statePayload,
                content_type: Swift.String,
                size: Swift.Int,
                download_count: Swift.Int,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                uploader: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil
            ) {
                self.url = url
                self.browser_download_url = browser_download_url
                self.id = id
                self.node_id = node_id
                self.name = name
                self.label = label
                self.state = state
                self.content_type = content_type
                self.size = size
                self.download_count = download_count
                self.created_at = created_at
                self.updated_at = updated_at
                self.uploader = uploader
            }
            internal enum CodingKeys: String, CodingKey {
                case url
                case browser_download_url
                case id
                case node_id
                case name
                case label
                case state
                case content_type
                case size
                case download_count
                case created_at
                case updated_at
                case uploader
            }
        }
        /// A release.
        ///
        /// - Remark: Generated from `#/components/schemas/release`.
        internal struct release: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/release/url`.
            internal var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/html_url`.
            internal var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/assets_url`.
            internal var assets_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/upload_url`.
            internal var upload_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/tarball_url`.
            internal var tarball_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/zipball_url`.
            internal var zipball_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/id`.
            internal var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release/node_id`.
            internal var node_id: Swift.String
            /// The name of the tag.
            ///
            /// - Remark: Generated from `#/components/schemas/release/tag_name`.
            internal var tag_name: Swift.String
            /// Specifies the commitish value that determines where the Git tag is created from.
            ///
            /// - Remark: Generated from `#/components/schemas/release/target_commitish`.
            internal var target_commitish: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/name`.
            internal var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/body`.
            internal var body: Swift.String?
            /// true to create a draft (unpublished) release, false to create a published one.
            ///
            /// - Remark: Generated from `#/components/schemas/release/draft`.
            internal var draft: Swift.Bool
            /// Whether to identify the release as a prerelease or a full release.
            ///
            /// - Remark: Generated from `#/components/schemas/release/prerelease`.
            internal var prerelease: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/release/created_at`.
            internal var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/release/published_at`.
            internal var published_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/release/author`.
            internal var author: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/release/assets`.
            internal var assets: [Components.Schemas.release_hyphen_asset]
            /// - Remark: Generated from `#/components/schemas/release/body_html`.
            internal var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/body_text`.
            internal var body_text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/mentions_count`.
            internal var mentions_count: Swift.Int?
            /// The URL of the release discussion.
            ///
            /// - Remark: Generated from `#/components/schemas/release/discussion_url`.
            internal var discussion_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/reactions`.
            internal var reactions: Components.Schemas.reaction_hyphen_rollup?
            /// Creates a new `release`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - html_url:
            ///   - assets_url:
            ///   - upload_url:
            ///   - tarball_url:
            ///   - zipball_url:
            ///   - id:
            ///   - node_id:
            ///   - tag_name: The name of the tag.
            ///   - target_commitish: Specifies the commitish value that determines where the Git tag is created from.
            ///   - name:
            ///   - body:
            ///   - draft: true to create a draft (unpublished) release, false to create a published one.
            ///   - prerelease: Whether to identify the release as a prerelease or a full release.
            ///   - created_at:
            ///   - published_at:
            ///   - author:
            ///   - assets:
            ///   - body_html:
            ///   - body_text:
            ///   - mentions_count:
            ///   - discussion_url: The URL of the release discussion.
            ///   - reactions:
            internal init(
                url: Swift.String,
                html_url: Swift.String,
                assets_url: Swift.String,
                upload_url: Swift.String,
                tarball_url: Swift.String? = nil,
                zipball_url: Swift.String? = nil,
                id: Swift.Int,
                node_id: Swift.String,
                tag_name: Swift.String,
                target_commitish: Swift.String,
                name: Swift.String? = nil,
                body: Swift.String? = nil,
                draft: Swift.Bool,
                prerelease: Swift.Bool,
                created_at: Foundation.Date,
                published_at: Foundation.Date? = nil,
                author: Components.Schemas.simple_hyphen_user,
                assets: [Components.Schemas.release_hyphen_asset],
                body_html: Swift.String? = nil,
                body_text: Swift.String? = nil,
                mentions_count: Swift.Int? = nil,
                discussion_url: Swift.String? = nil,
                reactions: Components.Schemas.reaction_hyphen_rollup? = nil
            ) {
                self.url = url
                self.html_url = html_url
                self.assets_url = assets_url
                self.upload_url = upload_url
                self.tarball_url = tarball_url
                self.zipball_url = zipball_url
                self.id = id
                self.node_id = node_id
                self.tag_name = tag_name
                self.target_commitish = target_commitish
                self.name = name
                self.body = body
                self.draft = draft
                self.prerelease = prerelease
                self.created_at = created_at
                self.published_at = published_at
                self.author = author
                self.assets = assets
                self.body_html = body_html
                self.body_text = body_text
                self.mentions_count = mentions_count
                self.discussion_url = discussion_url
                self.reactions = reactions
            }
            internal enum CodingKeys: String, CodingKey {
                case url
                case html_url
                case assets_url
                case upload_url
                case tarball_url
                case zipball_url
                case id
                case node_id
                case tag_name
                case target_commitish
                case name
                case body
                case draft
                case prerelease
                case created_at
                case published_at
                case author
                case assets
                case body_html
                case body_text
                case mentions_count
                case discussion_url
                case reactions
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    internal enum Parameters {
        /// The account owner of the repository. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/owner`.
        internal typealias owner = Swift.String
        /// The name of the repository without the `.git` extension. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/repo`.
        internal typealias repo = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    internal enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    internal enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    internal enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
internal enum Operations {
    /// Get the latest release
    ///
    /// View the latest published full release for the repository.
    ///
    /// The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/latest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)`.
    internal enum repos_sol_get_hyphen_latest_hyphen_release {
        internal static let id: Swift.String = "repos/get-latest-release"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/path/owner`.
                internal var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/path/repo`.
                internal var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                internal init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            internal var path: Operations.repos_sol_get_hyphen_latest_hyphen_release.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_latest_hyphen_release.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_latest_hyphen_release.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.repos_sol_get_hyphen_latest_hyphen_release.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.repos_sol_get_hyphen_latest_hyphen_release.Input.Path,
                headers: Operations.repos_sol_get_hyphen_latest_hyphen_release.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.release)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.release {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.repos_sol_get_hyphen_latest_hyphen_release.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.repos_sol_get_hyphen_latest_hyphen_release.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_latest_hyphen_release.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.repos_sol_get_hyphen_latest_hyphen_release.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
